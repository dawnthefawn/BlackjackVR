using System.Collections; using System.Collections.Generic; using UnityEngine;  namespace caZino {      public class Mathandler : MonoBehaviour     {          public GameObject gObj;         public GameObject secretcard;         public GameObject deck;          private Vector3 margins;         private Vector3 nextposition;         private int numcards;         public List<GameObject> inPlay;         private float cardwidth;         private float cardlength;           public void Newgame()         {             numcards = 0;             margins = new Vector3();             nextposition = new Vector3();         }         /// <summary>         /// SecretCard will be the first card played in the game.         /// It will play the card face down, and calculate the margins         /// for laying down the cards nicely         /// </summary>         ///          /// <param name="c">This is the card passed through the dealers         /// Secret Card Method         ///          /// </param>         public void FirstCard(GameObject c)         {             Card card = c.GetComponent<Card>();
            cardlength = card.Cardsize().z;
            cardwidth = card.Cardsize().x;             margins = CalculateMargins(card);             nextposition = CalculateStartingPosition(card);             PlaceCard(c);
          }          /// <summary>         /// This only gets called on the dealer's first card.         /// Performs both FirstCard and PlaceCard to handle the rotated card.         /// </summary>         /// <param name="c"></param>         public void SecretCard(GameObject c)         {             Card card = c.GetComponent<Card>();             margins = CalculateMargins(card);             nextposition = CalculateStartingPosition(card);             numcards++;
            SetPosition(c);             nextposition.x += 2 * ( cardwidth + margins.x);             c.transform.Rotate(180, 0, 0);             c.SetActive(true);             secretcard = c;             inPlay.Add(secretcard);          }

        private static GameObject GetCard(Card c)
        {
            return GameObject.Find(c.cardskin);
        }

        private void SetPosition(GameObject nextcard)
        {
            nextcard.transform.position = nextposition;
        }





        /// <summary>         /// Delete all the cards on the play mat.         /// </summary>         public void ClearBoard()         {             foreach(GameObject c in inPlay)             {                 Destroy(c);                 inPlay.Remove(c);                 numcards = 0;             }         }          ///         /// <summary>         /// Call this from the the respective Hand.AddCard         /// </summary>         /// <param name="c">same card passing through Hand.AddCard</param>         ///          public void PlaceCard(GameObject c)         {             numcards++;             Debug.LogError(c.name);             c.transform.position = nextposition;             nextposition.x += (cardwidth + (margins.x *2));             inPlay.Add(c);             Debug.Log(c.name + " " + c.transform.position);         }          /// <summary>         /// Just flips the dealer's secret card.         /// </summary>         public void FlipSecret()         {             secretcard.transform.Rotate(180, 0, 0);         }          private Vector3 CalculateMargins(Card c)         {             Vector3 v = gObj.GetComponent<Renderer>().bounds.size;             var x = ((v.x / 5) - cardwidth) / 2;             var y = v.y;             var z = (v.z - cardlength) / 2;             return new Vector3(x, y, z);          }          private Vector3 CalculateStartingPosition(Card c)         {             Vector3 min = gObj.GetComponent<Renderer>().bounds.min;             Vector3 max = gObj.GetComponent<Renderer>().bounds.max;             Vector3 center = gObj.GetComponent<Renderer>().bounds.center;              return new Vector3((min.x + (cardwidth / 2) + margins.x), max.y + margins.y, center.z);         }            // Use this for initialization         void Start()         {             Newgame();         }     } }